name: Security Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  # Base configuration
  NODE_OPTIONS: "--max-old-space-size=4096"

  # Report paths
  REPORT_PATH: "reports"
  CONTAINER_SCAN_REPORT: "reports/trivy-vulns.json"
  DOCKERFILE_SCAN_REPORT: "reports/trivy-dockerfile.json"
  COMPLIANCE_REPORT: "reports/trivy-compliance.json"
  NPM_AUDIT_REPORT: "reports/npm-audit.json"
  NPM_SBOM_REPORT: "reports/npm-sbom.cdx.json"
  DAST_REPORT: "reports/zap-report.json"
  SAST_REPORT: "reports/semgrep-results.sarif"
  SECRET_REPORT: "reports/gitleaks-report.json"

  # Trivy Configuration
  TRIVY_NO_PROGRESS: "true"
  TRIVY_SEVERITY: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"

  # DefectDojo Configuration
  DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
  PRODUCT_NAME: "Juice Shop"
  ENGAGEMENT_NAME: "Security Pipeline"

jobs:
  # Static Analysis
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Generate package-lock.json
        run: npm install --package-lock-only --ignore-scripts

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Create reports directory
        run: mkdir -p ${{ env.REPORT_PATH }}

      - name: Install dependencies and run audit
        continue-on-error: true
        run: |
          echo "Installing dependencies..."
          npm install --ignore-scripts

          echo "Running npm audit..."
          npm audit --json > "${{ env.NPM_AUDIT_REPORT }}" || true

          # Show audit summary
          if [ -f "${{ env.NPM_AUDIT_REPORT }}" ]; then
            echo "NPM Audit Summary:"
            jq -r '
              if has("auditReportVersion") then
                .metadata.vulnerabilities | 
                "Critical: \(.critical // 0)\nHigh: \(.high // 0)\nModerate: \(.moderate // 0)\nLow: \(.low // 0)\nInfo: \(.info // 0)\nTotal: \(.total // 0)"
              else
                "No vulnerabilities found"
              end
            ' "${{ env.NPM_AUDIT_REPORT }}"
          fi

      - name: Install and verify Trivy
        run: |
          echo "Installing Trivy..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh -o install-trivy.sh
          chmod +x install-trivy.sh
          ./install-trivy.sh -b /usr/local/bin v0.48.0

          echo "Verifying Trivy installation..."
          trivy --version
          which trivy

          if ! command -v trivy &> /dev/null; then
            echo "ERROR: Trivy installation failed"
            exit 1
          fi

          echo "Trivy installed successfully"

      - name: Generate SBOM
        continue-on-error: true
        run: |
          echo "Generating SBOM with Trivy..."

          # Ensure reports directory exists
          mkdir -p "${{ env.REPORT_PATH }}"

          # Run Trivy with detailed error handling
          if ! trivy fs \
            --format cyclonedx \
            --output "${{ env.NPM_SBOM_REPORT }}" \
            --scanners vuln \
            .; then
            echo "ERROR: Trivy SBOM generation failed"
            exit 1
          fi

          # Verify output file exists and is not empty
          if [ ! -f "${{ env.NPM_SBOM_REPORT }}" ]; then
            echo "ERROR: SBOM file was not created"
            exit 1
          fi

          if [ ! -s "${{ env.NPM_SBOM_REPORT }}" ]; then
            echo "ERROR: SBOM file is empty"
            exit 1
          fi

          echo "SBOM Summary:"
          jq -r '"Total components: \(if has("components") then .components | length else 0 end)"' "${{ env.NPM_SBOM_REPORT }}" || {
            echo "ERROR: Failed to parse SBOM file"
            exit 1
          }

      - name: Run Semgrep Analysis
        continue-on-error: true
        run: |
          echo "Running Semgrep Analysis..."
          docker run --rm \
            -v "$(pwd):/src" \
            -v "$(pwd)/${{ env.REPORT_PATH }}:/reports" \
            returntocorp/semgrep semgrep \
              --sarif --output /reports/semgrep-results.sarif \
              --metrics=off \
              --timeout 300 \
              --jobs 2 \
              --config "p/default" \
              --config "p/typescript" \
              --config "p/nodejs" \
              --config "p/javascript" \
              --config "p/react" \
              --config "p/expressjs" \
              --config "p/owasp-top-ten" \
              --config "p/security-audit" \
              --config "p/jwt" \
              --config "p/sql-injection" \
              --config "p/xss" \
              --config "p/secrets" \
              /src

      - name: Process Semgrep Results
        if: always()
        run: |
          if [ -f "${{ env.SAST_REPORT }}" ]; then
            echo "Processing Semgrep results..."
            
            # Verify SARIF file is valid JSON
            if jq empty "${{ env.SAST_REPORT }}" 2>/dev/null; then
              echo "Semgrep report is valid JSON"
              
              # Show summary of findings
              echo "Semgrep Analysis Summary:"
              jq -r '.runs[0].results | group_by(.level) | map({severity: .[0].level, count: length}) | .[] | "* \(.severity): \(.count)"' "${{ env.SAST_REPORT }}" || echo "No findings"
            else
              echo "Semgrep report exists but is not valid JSON, creating empty report"
              echo "[]" > "${{ env.SAST_REPORT }}"
            fi
          else
            echo "No Semgrep results found, creating empty report"
            echo "[]" > "${{ env.SAST_REPORT }}"
          fi

      - name: Run Secret Detection
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true

      - name: Process Gitleaks Results
        if: always()
        run: |
          if [ -f "results.sarif" ]; then
            echo "Processing Gitleaks results..."
            cp results.sarif "${{ env.SECRET_REPORT }}"
            
            # Show summary of findings
            echo "Gitleaks Analysis Summary:"
            jq -r '.runs[0].results | length | "Total findings: \(.)"' results.sarif || echo "No findings"
          else
            echo "No Gitleaks results found"
            echo "[]" > "${{ env.SECRET_REPORT }}"
          fi

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-reports
          path: |
            ${{ env.REPORT_PATH }}/npm-*.json
            ${{ env.REPORT_PATH }}/semgrep-results.sarif
            ${{ env.REPORT_PATH }}/gitleaks-report.json
            package-lock.json
          retention-days: 1

  # Build and Container Security
  build:
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create reports directory
        run: mkdir -p ${{ env.REPORT_PATH }}/docker

      - name: Install and verify Trivy
        run: |
          echo "Installing Trivy..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh -o install-trivy.sh
          chmod +x install-trivy.sh
          ./install-trivy.sh -b /usr/local/bin v0.48.0

          echo "Verifying Trivy installation..."
          trivy --version
          which trivy

          if ! command -v trivy &> /dev/null; then
            echo "ERROR: Trivy installation failed"
            exit 1
          fi

          echo "Trivy installed successfully"

      - name: Build container
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: juice-shop:${{ github.sha }}
          build-args: |
            NODE_OPTIONS=--max-old-space-size=4096

      - name: Run Security Scans
        continue-on-error: true
        run: |
          # Dockerfile scan
          trivy config \
            --format json \
            --output "${{ env.DOCKERFILE_SCAN_REPORT }}" \
            --severity ${{ env.TRIVY_SEVERITY }} \
            Dockerfile

          # Container scan
          trivy image \
            --format json \
            --output "${{ env.CONTAINER_SCAN_REPORT }}" \
            --severity ${{ env.TRIVY_SEVERITY }} \
            juice-shop:${{ github.sha }}

          # Compliance scan
          trivy image \
            --compliance docker-cis \
            --format json \
            --output "${{ env.COMPLIANCE_REPORT }}" \
            juice-shop:${{ github.sha }}

      - name: Save container for DAST
        run: |
          docker save juice-shop:${{ github.sha }} > ${{ env.REPORT_PATH }}/docker/juice-shop.tar

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: container-security-reports
          path: |
            ${{ env.REPORT_PATH }}/docker/juice-shop.tar
            ${{ env.REPORT_PATH }}/trivy-*.json
          retention-days: 1

  # Dynamic Analysis
  dast:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download container artifact
        uses: actions/download-artifact@v4
        with:
          name: container-security-reports
          path: ${{ env.REPORT_PATH }}

      - name: Create Network
        run: docker network create dast-network

      - name: Load container
        run: docker load < ${{ env.REPORT_PATH }}/docker/juice-shop.tar

      - name: Start Application and Run DAST
        continue-on-error: true
        timeout-minutes: 30
        run: |
          echo "Starting application container..."
          docker run -d --name juice-shop -p 3000:3000 --network dast-network juice-shop:${{ github.sha }}

          echo "Waiting for application to be ready..."
          timeout=120
          while ! curl -s --connect-timeout 5 http://localhost:3000 > /dev/null; do
            ((timeout--))
            if [ $timeout -eq 0 ]; then
              echo "ERROR: Application failed to start within 120 seconds"
              docker logs juice-shop
              exit 1
            fi
            echo "Waiting for application... (${timeout}s remaining)"
            sleep 1
          done
          echo "Application is ready!"

          echo "Preparing for ZAP Scan..."
          mkdir -p ${{ env.REPORT_PATH }}
          chmod 777 ${{ env.REPORT_PATH }}

          echo "Running ZAP Scan..."
          docker run --rm --network dast-network \
            -v "$(pwd)/${{ env.REPORT_PATH }}:/zap/wrk/:rw" \
            --user root \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t http://juice-shop:3000 \
            -I \
            -m 5 \
            -T 20 \
            -J "/zap/wrk/zap-report.json" \
            --auto || true

          # Ensure the report exists and is valid JSON
          if [ -f "${{ env.REPORT_PATH }}/zap-report.json" ]; then
            if jq empty "${{ env.REPORT_PATH }}/zap-report.json" 2>/dev/null; then
              echo "ZAP report generated successfully and is valid JSON"
            else
              echo "ZAP report exists but is not valid JSON, creating empty report"
              echo "[]" > "${{ env.DAST_REPORT }}"
            fi
          else
            echo "ZAP failed to generate report, creating empty one"
            echo "[]" > "${{ env.DAST_REPORT }}"
          fi

          # Display report summary if it exists
          if [ -f "${{ env.DAST_REPORT }}" ]; then
            echo "DAST Report Summary:"
            jq -r '.site[0].alerts | group_by(.riskcode) | map({risk: (if .[0].riskcode == "3" then "High" elif .[0].riskcode == "2" then "Medium" elif .[0].riskcode == "1" then "Low" else "Info" end), count: length}) | .[] | "* \(.risk): \(.count)"' "${{ env.DAST_REPORT }}" || echo "No findings or invalid format"
          fi

      - name: Upload DAST Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast-report
          path: ${{ env.DAST_REPORT }}
          retention-days: 1

      - name: Cleanup
        if: always()
        run: |
          docker rm -f juice-shop || true
          docker network rm dast-network || true

  # Report Consolidation and DefectDojo Integration
  report:
    runs-on: ubuntu-latest
    needs: [static-analysis, build, dast]
    steps:
      - name: Create Reports Directory
        run: mkdir -p ${{ env.REPORT_PATH }}

      - name: Download Static Analysis Reports
        uses: actions/download-artifact@v4
        with:
          name: static-analysis-reports
          path: .

      - name: Download Container Security Reports
        uses: actions/download-artifact@v4
        with:
          name: container-security-reports
          path: .

      - name: Download DAST Report
        uses: actions/download-artifact@v4
        with:
          name: dast-report
          path: .

      - name: Fix Report Structure
        run: |
          echo "Fixing report directory structure..."
          # Move all JSON and SARIF files to reports directory if they exist in root
          find . -maxdepth 1 -type f \( -name "*.json" -o -name "*.sarif" \) -exec mv {} ${{ env.REPORT_PATH }}/ \;

          # Move files from nested reports directory if it exists
          if [ -d "reports/reports" ]; then
            mv reports/reports/* ${{ env.REPORT_PATH }}/ 2>/dev/null || true
            rm -rf reports/reports
          fi

          echo "Final reports directory structure:"
          ls -R ${{ env.REPORT_PATH }}

      - name: Verify Reports
        run: |
          echo "Verifying reports in ${{ env.REPORT_PATH }}..."

          # Function to check and validate JSON/SARIF files
          check_report() {
            local report_path="$1"
            local report_type="$2"
            
            if [ ! -f "$report_path" ]; then
              echo "WARNING: $report_type report not found at $report_path"
              # Create empty report if missing
              echo "[]" > "$report_path"
              echo "Created empty report for $report_type"
            else
              echo "Found $report_type report"
              # Validate JSON format
              if ! jq empty "$report_path" 2>/dev/null; then
                echo "WARNING: Invalid JSON/SARIF format in $report_path"
                # Backup invalid file and create empty report
                mv "$report_path" "${report_path}.invalid"
                echo "[]" > "$report_path"
                echo "Created empty report due to invalid format"
              fi
            fi
          }

          # Check each report
          check_report "${{ env.SAST_REPORT }}" "SAST"
          check_report "${{ env.DAST_REPORT }}" "DAST"
          check_report "${{ env.CONTAINER_SCAN_REPORT }}" "Container Scan"
          check_report "${{ env.NPM_AUDIT_REPORT }}" "NPM Audit"
          check_report "${{ env.SECRET_REPORT }}" "Secret Detection"

          echo "Report verification complete"

      - name: Install curl and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Verify DefectDojo Configuration
        run: |
          if [ -z "${{ secrets.DEFECTDOJO_URL }}" ]; then
            echo "ERROR: DEFECTDOJO_URL is not set"
            exit 1
          fi

          if [ -z "${{ secrets.DEFECTDOJO_API_KEY }}" ]; then
            echo "ERROR: DEFECTDOJO_API_KEY is not set"
            exit 1
          fi

      - name: Create DefectDojo Engagement
        run: |
          # Get Product ID or create if not exists
          PRODUCT_ID=$(curl -s -X GET \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -H "Accept: application/json" \
            "${DEFECTDOJO_URL}/api/v2/products/?name=${PRODUCT_NAME}" | \
            jq -r '.results[0].id // empty')

          if [ -z "$PRODUCT_ID" ]; then
            echo "Creating new product: ${PRODUCT_NAME}"
            PRODUCT_ID=$(curl -s -X POST \
              -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
              -H "Content-Type: application/json" \
              -H "Accept: application/json" \
              "${DEFECTDOJO_URL}/api/v2/products/" \
              -d "{\"name\":\"${PRODUCT_NAME}\",\"description\":\"${PRODUCT_NAME} Security Pipeline\"}" | \
              jq -r '.id')
          fi

          if [ -z "$PRODUCT_ID" ]; then
            echo "ERROR: Failed to get or create product"
            exit 1
          fi

          echo "Using product ID: ${PRODUCT_ID}"

          # Create Engagement
          ENGAGEMENT_ID=$(curl -s -X POST \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            "${DEFECTDOJO_URL}/api/v2/engagements/" \
            -d "{
              \"name\":\"${ENGAGEMENT_NAME}\",
              \"product\":${PRODUCT_ID},
              \"target_start\":\"$(date -I)\",
              \"target_end\":\"$(date -I)\",
              \"status\":\"In Progress\"
            }" | jq -r '.id')

          if [ -z "$ENGAGEMENT_ID" ]; then
            echo "ERROR: Failed to create engagement"
            exit 1
          fi

          echo "Created engagement ID: ${ENGAGEMENT_ID}"
          echo "ENGAGEMENT_ID=${ENGAGEMENT_ID}" >> $GITHUB_ENV

      - name: Import SAST Results
        run: |
          if [ -f "${{ env.SAST_REPORT }}" ]; then
            echo "Importing SAST results from: ${{ env.SAST_REPORT }}"
            # Validate SARIF format
            if jq empty "${{ env.SAST_REPORT }}" 2>/dev/null; then
              curl -X POST \
                -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
                -H "Accept: application/json" \
                -F "scan_type=SARIF" \
                -F "file=@${{ env.SAST_REPORT }}" \
                -F "engagement=${ENGAGEMENT_ID}" \
                -F "close_old_findings=true" \
                "${DEFECTDOJO_URL}/api/v2/import-scan/" || echo "Failed to import SAST results"
            else
              echo "Invalid SARIF format in ${{ env.SAST_REPORT }}, skipping import"
            fi
          else
            echo "SAST report not found at ${{ env.SAST_REPORT }}, skipping import"
          fi

      - name: Import DAST Results
        run: |
          if [ -f "${DAST_REPORT}" ]; then
            echo "Importing DAST results from: ${DAST_REPORT}"
            # Validate JSON format
            if jq empty "${DAST_REPORT}" 2>/dev/null; then
              curl -X POST \
                -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
                -H "Accept: application/json" \
                -F "scan_type=ZAP Scan" \
                -F "file=@${DAST_REPORT}" \
                -F "engagement=${ENGAGEMENT_ID}" \
                -F "close_old_findings=true" \
                "${DEFECTDOJO_URL}/api/v2/import-scan/" || echo "Failed to import DAST results"
            else
              echo "Invalid JSON format in ${DAST_REPORT}, skipping import"
            fi
          else
            echo "DAST report not found at ${DAST_REPORT}, skipping import"
          fi

      - name: Import Container Scan Results
        run: |
          if [ -f "${CONTAINER_SCAN_REPORT}" ]; then
            echo "Importing Container Scan results from: ${CONTAINER_SCAN_REPORT}"
            # Validate JSON format
            if jq empty "${CONTAINER_SCAN_REPORT}" 2>/dev/null; then
              curl -X POST \
                -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
                -H "Accept: application/json" \
                -F "scan_type=Trivy Scan" \
                -F "file=@${CONTAINER_SCAN_REPORT}" \
                -F "engagement=${ENGAGEMENT_ID}" \
                -F "close_old_findings=true" \
                "${DEFECTDOJO_URL}/api/v2/import-scan/" || echo "Failed to import Container Scan results"
            else
              echo "Invalid JSON format in ${CONTAINER_SCAN_REPORT}, skipping import"
            fi
          else
            echo "Container scan report not found at ${CONTAINER_SCAN_REPORT}, skipping import"
          fi

      - name: Import Dependency Scan Results
        run: |
          if [ -f "${NPM_AUDIT_REPORT}" ]; then
            echo "Importing NPM Audit results from: ${NPM_AUDIT_REPORT}"
            # Validate JSON format
            if jq empty "${NPM_AUDIT_REPORT}" 2>/dev/null; then
              curl -X POST \
                -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
                -H "Accept: application/json" \
                -F "scan_type=NPM Audit Scan" \
                -F "file=@${NPM_AUDIT_REPORT}" \
                -F "engagement=${ENGAGEMENT_ID}" \
                -F "close_old_findings=true" \
                "${DEFECTDOJO_URL}/api/v2/import-scan/" || echo "Failed to import NPM Audit results"
            else
              echo "Invalid JSON format in ${NPM_AUDIT_REPORT}, skipping import"
            fi
          else
            echo "NPM Audit report not found at ${NPM_AUDIT_REPORT}, skipping import"
          fi

      - name: Generate Summary Report
        run: |
          {
            echo "# Security Scan Summary"
            echo "## Vulnerability Counts"
            
            # DAST findings
            echo "### DAST Findings"
            jq -r '.site[0].alerts | group_by(.riskcode) | map({risk: (if .[0].riskcode == "3" then "High" elif .[0].riskcode == "2" then "Medium" elif .[0].riskcode == "1" then "Low" else "Info" end), count: length}) | .[] | "* \(.risk): \(.count)"' ${{ env.DAST_REPORT }} 2>/dev/null || echo "* No findings"
            
            # Container vulnerabilities
            echo -e "\n### Container Vulnerabilities"
            jq -r '.Results | map(.Vulnerabilities // []) | flatten | group_by(.Severity) | map({severity: .[0].Severity, count: length}) | .[] | "* \(.severity): \(.count)"' ${{ env.CONTAINER_SCAN_REPORT }} 2>/dev/null || echo "* No findings"
            
            # npm vulnerabilities
            echo -e "\n### Dependency Vulnerabilities"
            jq -r 'if has("auditReportVersion") then .metadata.vulnerabilities | "* Critical: \(.critical)\n* High: \(.high)\n* Moderate: \(.moderate)\n* Low: \(.low)\n* Info: \(.info // 0)" else "* No findings" end' ${{ env.NPM_AUDIT_REPORT }} 2>/dev/null || echo "* No findings"
            
            echo -e "\n## DefectDojo Integration"
            echo "* Results uploaded to: ${DEFECTDOJO_URL}/engagement/${ENGAGEMENT_ID}"
          } > ${{ env.REPORT_PATH }}/security-summary.md

      - name: Upload Final Report
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: ${{ env.REPORT_PATH }}/security-summary.md
          retention-days: 30
