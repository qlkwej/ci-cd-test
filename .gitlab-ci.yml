image: alpine:3.18

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - when: never

variables:
  # Base configuration
  GIT_DEPTH: "1"
  DOCKER_DRIVER: overlay2
  NODE_OPTIONS: "--max-old-space-size=4096"

  # GitLab Security Template Configuration
  SAST_STAGE: "static_analysis"
  SECRET_DETECTION_STAGE: "static_analysis"
  SAST_EXCLUDED_PATHS: "spec, test, tests, tmp"
  SCAN_KUBERNETES_MANIFESTS: "false"
  SECURE_LOG_LEVEL: "debug"
  SAST_ANALYZER_IMAGE_TAG: "3"

  # Trivy Configuration
  TRIVY_NO_PROGRESS: "true"
  TRIVY_SEVERITY: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"

  # Report paths
  REPORT_PATH: "reports"
  CONTAINER_SCAN_REPORT: "${REPORT_PATH}/trivy-vulns.json" # Container vulnerabilities
  DOCKERFILE_SCAN_REPORT: "${REPORT_PATH}/trivy-dockerfile.json" # Dockerfile misconfigurations
  COMPLIANCE_REPORT: "${REPORT_PATH}/trivy-compliance.json" # CIS Docker Benchmark
  NPM_AUDIT_REPORT: "${REPORT_PATH}/npm-audit.json" # npm dependencies vulnerabilities
  NPM_SBOM_REPORT: "${REPORT_PATH}/npm-sbom.cdx.json" # Software dependencies SBOM
  DAST_REPORT: "${REPORT_PATH}/zap-report.json" # Dynamic analysis results

# Default artifacts configuration
default:
  artifacts:
    when: always
    expire_in: 1 day # Short retention for intermediate artifacts

stages:
  - static_analysis # SAST and dependency checks
  - build # Build and container security
  - dynamic_analysis # DAST
  - report # Report consolidation

# Override template jobs to use correct stages
sast:
  stage: static_analysis
  variables:
    SECURE_LOG_LEVEL: "debug"
  allow_failure: true

secret_detection:
  stage: static_analysis
  allow_failure: true

# Source code analysis
source-scan:
  stage: static_analysis
  image: node:18-alpine
  before_script:
    - apk add --no-cache git jq curl
    # Install Trivy
    - |
      echo "Installing Trivy..."
      apk add --no-cache wget
      TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
      wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
    - mkdir -p ${REPORT_PATH}

  script:
    # Install dependencies without running scripts
    - |
      echo "Installing dependencies..."
      # Generate package-lock.json first
      npm install --package-lock-only --ignore-scripts

      # Verify package-lock.json was generated
      if [ ! -f "package-lock.json" ]; then
        echo "ERROR: Failed to generate package-lock.json"
        exit 1
      fi

      # Then do full install without scripts
      npm install --ignore-scripts

      echo "Running npm audit..."
      # Run audit and ensure JSON output even with vulnerabilities
      npm audit --json > "${NPM_AUDIT_REPORT}" || true

      # Show audit summary
      if [ -f "${NPM_AUDIT_REPORT}" ]; then
        echo "NPM Audit Summary:"
        jq -r '
          if has("auditReportVersion") then
            .metadata.vulnerabilities | 
            "Critical: \(.critical // 0)\nHigh: \(.high // 0)\nModerate: \(.moderate // 0)\nLow: \(.low // 0)\nInfo: \(.info // 0)\nTotal: \(.total // 0)"
          else
            "No vulnerabilities found"
          end
        ' "${NPM_AUDIT_REPORT}"
      fi

    # Generate SBOM using Trivy
    - |
      echo "Generating SBOM with Trivy..."
      echo "Current directory contents:"
      ls -la
      echo "pwd: >>"
      pwd

      # Generate SBOM in CycloneDX format
      ./trivy fs \
        --format cyclonedx \
        --output "${NPM_SBOM_REPORT}" \
        --scanners vuln \
        .

      if [ ! -f "${NPM_SBOM_REPORT}" ]; then
        echo "ERROR: Failed to generate SBOM"
        exit 1
      fi

      echo "SBOM Summary:"
      jq -r '"Total components: \(if has("components") then .components | length else 0 end)"' "${NPM_SBOM_REPORT}"

    # Verify reports exist and are valid
    - |
      echo "Verifying reports..."
      for report in "${NPM_AUDIT_REPORT}" "${NPM_SBOM_REPORT}"; do
        if [ ! -f "$report" ]; then
          echo "ERROR: Report not found: $report"
          exit 1
        fi
        
        if [ ! -s "$report" ]; then
          echo "ERROR: Empty report: $report"
          exit 1
        fi
        
        if ! jq empty "$report" 2>/dev/null; then
          echo "ERROR: Invalid JSON in report: $report"
          exit 1
        fi
        
        echo "âœ“ Validated $report"
      done

      echo "Report sizes:"
      ls -lh ${REPORT_PATH}/*.json

  cache:
    key: ${CI_COMMIT_REF_SLUG}-npm-deps
    paths:
      - node_modules/
      - package-lock.json
    policy: pull-push

  artifacts:
    reports:
      dependency_scanning: ${NPM_AUDIT_REPORT}
      cyclonedx: ${NPM_SBOM_REPORT}
    paths:
      - ${REPORT_PATH}/npm-*.json
      - package-lock.json
    when: always
    expire_in: 1 day

# Build and container security
build:
  stage: build
  image: docker:20.10-dind
  services:
    - docker:20.10-dind
  variables:
    DOCKER_BUILDKIT: "1"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add --no-cache wget curl jq
    # Install Trivy
    - |
      TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
      wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
    - mkdir -p ${REPORT_PATH}
  script:
    # Build container
    - |
      docker build \
        --build-arg NODE_OPTIONS="--max-old-space-size=4096" \
        --progress=plain \
        -t juice-shop:$CI_COMMIT_SHA .

    # Security scans
    - |
      # Dockerfile scan
      ./trivy config \
        --format json \
        --output "${DOCKERFILE_SCAN_REPORT}" \
        --severity ${TRIVY_SEVERITY} \
        Dockerfile

      # Container scan
      ./trivy image \
        --format json \
        --output "${CONTAINER_SCAN_REPORT}" \
        --severity ${TRIVY_SEVERITY} \
        juice-shop:$CI_COMMIT_SHA

      # Compliance scan
      ./trivy image \
        --compliance docker-cis-1.6.0 \
        --format json \
        --output "${COMPLIANCE_REPORT}" \
        juice-shop:$CI_COMMIT_SHA

    # Save container for DAST
    - mkdir -p ${REPORT_PATH}/docker
    - docker save juice-shop:$CI_COMMIT_SHA > ${REPORT_PATH}/docker/juice-shop.tar

    # Verify reports
    - |
      for report in "${CONTAINER_SCAN_REPORT}" "${DOCKERFILE_SCAN_REPORT}" "${COMPLIANCE_REPORT}"; do
        if [ ! -f "$report" ] || [ ! -s "$report" ] || ! jq empty "$report" 2>/dev/null; then
          echo "ERROR: Invalid report: $report"
          exit 1
        fi
      done
  artifacts:
    reports:
      container_scanning: ${CONTAINER_SCAN_REPORT}
    paths:
      - ${REPORT_PATH}/docker/juice-shop.tar
      - ${REPORT_PATH}/trivy-*.json

# Dynamic Analysis
dast-start:
  stage: dynamic_analysis
  image: docker:20.10-dind
  services:
    - docker:20.10-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
    APP_CONTAINER_NAME: juice-shop
    APP_NETWORK: dast-network
    TARGET_URL: http://juice-shop:3000
    ZAP_IMAGE: zaproxy/zap-stable
  script:
    # Setup
    - apk add --no-cache curl jq
    - docker pull ${ZAP_IMAGE}
    - docker network create ${APP_NETWORK}
    - docker load < ${REPORT_PATH}/docker/juice-shop.tar

    # Start application and wait for it to be ready
    - |
      echo "Starting application container..."
      docker run -d --name ${APP_CONTAINER_NAME} --network ${APP_NETWORK} juice-shop:$CI_COMMIT_SHA

      echo "Waiting for application to be ready..."
      timeout=180
      while ! curl -s --connect-timeout 5 ${TARGET_URL} > /dev/null; do
        ((timeout--))
        if [ $timeout -eq 0 ]; then
          echo "ERROR: Application failed to start within 60 seconds"
          docker logs ${APP_CONTAINER_NAME}
          exit 1
        fi
        echo "Waiting for application... (${timeout}s remaining)"
        sleep 1
      done
      echo "Application is ready!"

    # Run ZAP scan
    - |
      echo "Starting ZAP scan..."
      docker run --rm \
        --network ${APP_NETWORK} \
        -v "${PWD}/${REPORT_PATH}:/zap/wrk:rw" \
        ${ZAP_IMAGE} \
        zap-baseline.py \
        -t ${TARGET_URL} \
        -J ${DAST_REPORT} \
        -I \
        -m 5 \
        -z "-config scanner.threadPerHost=2"

      # Verify ZAP report was generated
      if [ ! -f "${DAST_REPORT}" ]; then
        echo "ERROR: ZAP report not generated"
        exit 1
      fi

      # Show scan summary
      if [ -f "${DAST_REPORT}" ]; then
        echo "ZAP Scan Summary:"
        jq -r '
          .site[0].alerts | 
          group_by(.riskcode) | 
          map({
            risk: (
              if .[0].riskcode == "3" then "High"
              elif .[0].riskcode == "2" then "Medium"
              elif .[0].riskcode == "1" then "Low"
              else "Info"
              end
            ),
            count: length
          }) | 
          .[] | 
          "* \(.risk): \(.count)"
        ' "${DAST_REPORT}" || echo "Failed to parse ZAP report"
      fi

  after_script:
    - docker rm -f ${APP_CONTAINER_NAME} || true
    - docker network rm ${APP_NETWORK} || true
  needs:
    - job: build
      artifacts: true
  artifacts:
    paths:
      - ${REPORT_PATH}/zap-report.json

# Report consolidation
report:
  stage: report
  image: alpine:3.18
  script:
    - apk add --no-cache jq

    # Copy reports for GitLab dashboard
    - |
      cp ${DAST_REPORT} gl-dast-report.json
      cp ${CONTAINER_SCAN_REPORT} gl-container-scanning.json
      cp ${NPM_AUDIT_REPORT} gl-dependency-scanning.json

    # Generate summary report
    - |
      {
        echo "# Security Scan Summary"
        echo "## Vulnerability Counts"
        
        # DAST findings
        echo "### DAST Findings"
        jq -r '.site[0].alerts | group_by(.riskcode) | map({risk: (if .[0].riskcode == "3" then "High" elif .[0].riskcode == "2" then "Medium" elif .[0].riskcode == "1" then "Low" else "Info" end), count: length}) | .[] | "* \(.risk): \(.count)"' ${DAST_REPORT} 2>/dev/null || echo "* No findings"
        
        # Container vulnerabilities
        echo -e "\n### Container Vulnerabilities"
        jq -r '.Results | map(.Vulnerabilities // []) | flatten | group_by(.Severity) | map({severity: .[0].Severity, count: length}) | .[] | "* \(.severity): \(.count)"' ${CONTAINER_SCAN_REPORT} 2>/dev/null || echo "* No findings"
        
        # npm vulnerabilities
        echo -e "\n### Dependency Vulnerabilities"
        jq -r 'if has("auditReportVersion") then .metadata.vulnerabilities | "* Critical: \(.critical)\n* High: \(.high)\n* Moderate: \(.moderate)\n* Low: \(.low)\n* Info: \(.info // 0)" else "* No findings" end' ${NPM_AUDIT_REPORT} 2>/dev/null || echo "* No findings"
      } > ${REPORT_PATH}/security-summary.md

    - cat ${REPORT_PATH}/security-summary.md
  needs:
    - job: dast-start
      artifacts: true
    - job: build
      artifacts: true
    - job: source-scan
      artifacts: true
  artifacts:
    reports:
      dast: gl-dast-report.json
      container_scanning: gl-container-scanning.json
      dependency_scanning: gl-dependency-scanning.json
    paths:
      - ${REPORT_PATH}/security-summary.md
      - gl-*.json
    expire_in: 30 days
